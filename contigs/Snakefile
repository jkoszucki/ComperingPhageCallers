from pathlib import Path
import os

cwd = os.getcwd()
folders = ['databases', 'genomes']
subfolders = ['prokka', 'virsorter', 'phispy', 'reads', 'assemblies', 'contigs', 'contigs-sort']

_ = [Path(Path(cwd).parent, folder) for folder in folders]
_ = Path(cwd, 'output').mkdir(exist_ok=True)
_ = [Path(cwd, 'output', subfolder).mkdir(exist_ok=True) for subfolder in subfolders]

configfile: 'config.yaml'
shell("cp -f ../config.yaml .")

rule all:
    input:
        expand("output/phispy/{genome}.tsv", genome=config['genomes']),
        expand("output/virsorter/{genome}.csv", genome=config['genomes'])


# If output exists the command shouldn't be running...
# If prokka already annotated genome it will give rise to error.
rule annotate:
    input:
        "output/contigs/{genome}.fasta"
    output:
        "output/prokka/{genome}.gbk"
    params:
        outdir="output/prokka/{genome}",
        fname="{genome}"
    conda:
        "../envs/prokka.yaml"
    shell:
        "prokka --usegenus --genus Caudovirales --kingdom Bacteria "
        "--outdir {params.outdir} {input} 2>/dev/null; "
        "cp {params.outdir}/*.gbk output/prokka/{params.fname}.gbk; "

rule phispy:
    input:
        rules.annotate.output
    output:
        "output/phispy/{genome}.tsv"
    params:
        pvogs="../databases/pVOGs.hmm",
        outdir="output/phispy/{genome}",
        fname="{genome}"
    conda:
        "../envs/phispy.yaml"
    shell:
        "PhiSpy.py {input} "
        "--phmms {params.pvogs} -o {params.outdir} 2>/dev/null; "
        "cp -f {params.outdir}/prophage_coordinates.tsv output/phispy/{params.fname}.tsv"

rule virsorter:
    input:
        "output/contigs/{genome}.fasta"
    output:
        "output/virsorter/{genome}.csv"
    conda:
        "../envs/virsorter.yaml"
    params:
        virsorter="../scripts/VirSorter/wrapper_phage_contigs_sorter_iPlant.pl",
        database="../databases/virsorter-data/",
        outdir="output/virsorter/{genome}",
        fname="{genome}"
    shell:
        "{params.virsorter} -f {input} -db 1 --data-dir {params.database} "
        "--wdir {params.outdir} 2>/dev/null; "
        "cp -f {params.outdir}/*.csv output/virsorter/{params.fname}.csv"


rule reads:
    input:
        "../genomes/{genome}.fasta"
    output:
        read1="output/reads/{genome}_read1.fq",
        read2="output/reads/{genome}_read2.fq"
    params:
        read_lenght=config['parameters']['read_lenght']
    # conda:
    #     "envs/wgsim.yaml"

    ###############################################################
    # Install wgsim locally in snakemake env to generate reads!!! #
    ###############################################################
    shell:
        "wgsim -1 {params.read_lenght} -2 {params.read_lenght} "
        "-e 0.0 -r 0.0 -R 0.0 {input} {output.read1} {output.read2}"

rule assembly:
    input:
        read1=rules.reads.output.read1,
        read2=rules.reads.output.read2
    output:
        "output/contigs/{genome}.fasta"
    params:
        outdir="output/assemblies/{genome}",
        fname="{genome}"
    conda:
        "../envs/unicycler.yaml"
    shell:
        "unicycler -t 8 --no_correct -1 {input.read1} -2 {input.read2} -o {params.outdir}; "
        "cp -f {params.outdir}/assembly.fasta output/contigs/{params.fname}.fasta"

rule abacas:
    # input:
    #     reference="../genomes/{genome}.fasta",
    #     contigs=rules.assembly.output
    output:
        "output/contigs-sort/{genome}.tab"
    params:
        reference="../../../genomes/{genome}.fasta",
        contigs="../contigs/{genome}.fasta"
    conda:
        "../envs/abacas.yaml"
    shell:
        "cd output/contigs-sort; "
        "abacas.1.3.1.pl -r {params.reference} -q {params.contigs} -p nucmer -i 98 -v 100 -o {wildcards.genome}; "
        "rm *.{{delta,tiling,bin,crunch,fasta,gaps,gaps.tab,out}}; "
        "cd ../../;"



# # Sorting contigs.
# env = 'abacas'
# genome = 'AATZP'
# if not Path(f'{cwd}/contigs-sort-temp/{genome}.tab').exists():
#     _ = Path(f'{cwd}/contigs-sort-temp').mkdir(exist_ok=True)
#     print("*"*23)
#     print("* Sorting contigs ... *")
#     print("*"*23)
#     command = f'abacas.1.3.1.pl -r complete/{genome}.fasta -q contigs/{genome}.fasta -p nucmer -i 98 -v 100 -o contigs-sort-temp/{genome}'
#     subprocess.run(f" nice -n 5 conda run -n {env} {command}", shell=True)
#
#     # Remove temporary files.
#     [Path(temp_file).unlink(missing_ok=False) for temp_file in
#     ['nucmer.delta', 'nycmer.filtered.delta', 'nucmer.tiling', 'unused_contigs.out']]
# else:
#     pass
#
# abacas_output = Path(cwd, 'contigs-sort-temp/')
# contigs_path = abacas_output.glob(f'{genome}.tab')
# contigs_path = next(contigs_path)
# contigs_file = load_file(contigs_path)
# contigs = parse_abacas_contigs(contigs_file)
# # get_absolute_coordinates
