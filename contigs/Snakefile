from pathlib import Path
import os

cwd = os.getcwd()
folders = ['databases', 'genomes']
subfolders = ['prokka', 'virsorter', 'phispy', 'reads', 'assemblies', 'contigs', 'contigs-sort']

_ = [Path(Path(cwd).parent, folder) for folder in folders]
_ = Path(cwd, 'output').mkdir(exist_ok=True)
_ = [Path(cwd, 'output', subfolder).mkdir(exist_ok=True) for subfolder in subfolders]

configfile: 'config.yaml'

rule all:
    input:
        expand("output/contigs-sort/{genome}.tab", genome=config['genomes']),
        expand("output/phispy/{genome}.tsv", genome=config['genomes']),
        expand("output/virsorter/{genome}", genome=config['genomes'])

rule reads:
    input:
        "../genomes/{genome}.fasta"
    output:
        read1="output/reads/{genome}_read1.fq",
        read2="output/reads/{genome}_read2.fq"
    priority: 3
    params:
        read_lenght=config['read_lenght']

    ###############################################################
    # Install wgsim locally in snakemake env to generate reads!!! #
    ###############################################################

    shell:
        "wgsim -1 {params.read_lenght} -2 {params.read_lenght} "
        "-e 0.0 -r 0.0 -R 0.0 {input} {output.read1} {output.read2}"

rule assembly:
    input:
        read1=rules.reads.output.read1,
        read2=rules.reads.output.read2
    output:
        "output/assemblies/{genome}"
    params:
        min_fasta_length=config['min_fasta_length']
    priority: 2
    conda:
        "../envs/unicycler.yaml"
    shell:
        "unicycler -t 8 --no_correct -1 {input.read1} -2 {input.read2} "
        "--min_fasta_length {params.min_fasta_length} "
        "-o {output}; "
        "cp -f output/assemblies/{wildcards.genome}/assembly.fasta "
        "output/contigs/{wildcards.genome}.fasta"

rule abacas:
    input:
        contigs=rules.assembly.output,
        reference='../genomes/{genome}.fasta'
    output:
        "output/contigs-sort/{genome}.tab"
    # params:
        # reference="../../../genomes/{genome}.fasta",

    priority: 1
    conda:
        "../envs/abacas.yaml"
    shell:
        "abacas.1.3.1.pl -r {input.reference} -q {input.contigs}/assembly.fasta -p nucmer -i 98 -v 100 -o {output}; "
        "mv output/contigs-sort/{wildcards.genome}.tab.tab output/contigs-sort/{wildcards.genome}.tab; "
        "rm {wildcards.genome}*; rm nucmer*; rm *out"


# If output exists the command shouldn't be running...
# If prokka already annotated genome it will give rise to error.
rule annotate:
    input:
        rules.assembly.output
        # "output/contigs/{genome}.fasta"
    output:
        "output/prokka/{genome}.gbk"
    params:
        outdir="output/prokka/{genome}"
    conda:
        "../envs/prokka.yaml"
    shell:
        "prokka --usegenus --genus Caudovirales --force --kingdom Bacteria "
        "--outdir {params.outdir} {input}/assembly.fasta; "
        "cp {params.outdir}/*.gbk output/prokka/{wildcards.genome}.gbk; "

rule phispy:
    input:
        rules.annotate.output
    output:
        "output/phispy/{genome}.tsv"
    params:
        pvogs="../databases/pVOGs.hmm",
        outdir="output/phispy/{genome}",
        fname="{genome}"
    conda:
        "../envs/phispy.yaml"
    shell:
        "PhiSpy.py {input} "
        "--phmms {params.pvogs} -o {params.outdir}; "
        "cp -f {params.outdir}/prophage_coordinates.tsv output/phispy/{params.fname}.tsv"

rule virsorter:
    input:
        infile=rules.assembly.output,
        virsorter="../scripts/VirSorter/wrapper_phage_contigs_sorter_iPlant.pl",
        database="../databases/virsorter-data/"
    output:
        directory("output/virsorter/{genome}")
    conda:
        "../envs/virsorter.yaml"
    shell:
        "{input.virsorter} -f {input.infile} -db 1 --data-dir {input.database} "
        "--wdir {output} 2>/dev/null; "
        # "cp -f {params.outdir}/*.csv output/virsorter/{params.fname}.csv"
