from pathlib import Path
import os

cwd = os.getcwd()
folders = ['databases', 'genomes']
subfolders = ['prokka', 'virsorter', 'phispy']

_ = [Path(Path(cwd).parent, folder) for folder in folders]
_ = Path(cwd, 'output').mkdir(exist_ok=True)
_ = [Path(cwd, 'output', subfolder).mkdir(exist_ok=True) for subfolder in subfolders]


configfile: 'config.yaml'

rule all:
    input:
        expand("output/phispy/{genome}.tsv", genome=config['genomes']),
        expand("output/virsorter/{genome}.csv", genome=config['genomes'])

rule copy_configfile:
    params:
        input="../config.yaml",
        output="."
    priority: 1
    shell:
        "cp -f {params.input} {params.output}"

rule install_virsorter:
    output:
        directory("../scripts/VirSorter")
    shell:
        "cd ../scripts/; "
        "git clone https://github.com/simroux/VirSorter.git; "
        "cd ../scripts/VirSorter/Scripts; "
        "make clean; make; cd {cwd}"

rule install_virsorter_db:
    output:
        directory("../databases/virsorter-data")
    shell:
        "cd databases; "
        "wget https://zenodo.org/record/1168727/files/virsorter-data-v2.tar.gz "
        "tar -xvzf virsorter-data-v2.tar.gz "
        "cd {cwd}"

# If output exists the command shouldn't be running...
# If prokka already annotated genome it will give rise to error.
rule annotate:
    input:
        infile="../genomes/{genome}.fasta"
    output:
        "output/prokka/{genome}.gbk"
    params:
        outdir="output/prokka/{genome}",
        fname="{genome}"
    conda:
        "../envs/prokka.yaml"
    shell:
        "prokka --usegenus --genus Caudovirales --kingdom Bacteria "
        "--outdir {params.outdir} {input.infile} 2>/dev/null; "
        "cp {params.outdir}/*.gbk "
        "output/prokka/{params.fname}.gbk; "
        # "rm -rf {params.outdir}"

rule phispy:
    input:
        "output/prokka/{genome}.gbk"
    output:
        "output/phispy/{genome}.tsv"
    params:
        pvogs="../databases/pVOGs.hmm",
        outdir="output/phispy/{genome}",
        fname="{genome}"
    conda:
        "../envs/phispy.yaml"
    shell:
        "PhiSpy.py {input} "
        "--phmms {params.pvogs} -o {params.outdir} 2>/dev/null; "
        "cp {params.outdir}/prophage_coordinates.tsv output/phispy/{params.fname}.tsv"


rule virsorter:
    input:
        infile="../genomes/{genome}.fasta"
    output:
        "output/virsorter/{genome}.csv"
    conda:
        "../envs/virsorter.yaml"
    params:
        virsorter="../scripts/VirSorter/wrapper_phage_contigs_sorter_iPlant.pl",
        database="../databases/virsorter-data/",
        outdir="output/virsorter/{genome}",
        fname="{genome}"
    shell:
        "{params.virsorter} -f {input.infile} -db 1 --data-dir {params.database} "
        "--wdir {params.outdir} 2>/dev/null; "
        "cp {params.outdir}/*.csv output/virsorter/{params.fname}.csv"
